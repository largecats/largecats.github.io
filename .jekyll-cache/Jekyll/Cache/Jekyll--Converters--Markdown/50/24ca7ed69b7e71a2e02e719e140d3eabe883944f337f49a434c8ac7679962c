I"ϝ<ul id="markdown-toc">
  <li><a href="#motivation" id="markdown-toc-motivation">Motivation</a></li>
  <li><a href="#preparation" id="markdown-toc-preparation">Preparation</a></li>
  <li><a href="#method" id="markdown-toc-method">Method</a>    <ul>
      <li><a href="#collecting-data" id="markdown-toc-collecting-data">Collecting data</a>        <ul>
          <li><a href="#douban-top-250-vs-imdb" id="markdown-toc-douban-top-250-vs-imdb">Douban top 250 vs IMDb</a></li>
          <li><a href="#imdb-top-250-vs-douban" id="markdown-toc-imdb-top-250-vs-douban">IMDb top 250 vs Douban</a></li>
        </ul>
      </li>
      <li><a href="#visualization" id="markdown-toc-visualization">Visualization</a></li>
    </ul>
  </li>
</ul>

<h2 id="motivation">Motivation</h2>

<p>I wondered how movies at <a href="https://movie.douban.com/">Douban</a> compare to those at <a href="https://www.imdb.com/">IMDb</a>. I also wanted to learn web scraping as it was a required skill for a course I was going to take the following semester (otherwise I would have gone with API). So I decided to use web scraping to collect data on the top 250 movies at Douban and those at IMDb and do some comparative analyses.</p>

<h2 id="preparation">Preparation</h2>

<p>I read <a href="https://www.dataquest.io/blog/web-scraping-beautifulsoup/">this article</a> about BeautifulSoup.</p>

<h2 id="method">Method</h2>

<p>Douban and IMDb each has a list of top 250 movies. For each movie in Douban/IMDb’s list, I collected information of this movie from Douban/IMDb and IMDb/Douban. All code can be found <a href="https://github.com/largecats/web-scraping-practice/tree/master/movie-rating">here</a>. However, kindly note that the code, data files, and graphs were produced in 2017, so some parts of the code may not work with the websites’ current configuration.</p>

<h3 id="collecting-data">Collecting data</h3>

<p>The information to be collected are movie title, year of release, genre, region, IMDb rating, and Douban rating.</p>

<h4 id="douban-top-250-vs-imdb">Douban top 250 vs IMDb</h4>

<p>Here are the <a href="https://movie.douban.com/top250">top 250 movies on Douban</a>. Note that there are 10 pages, with 25 movies per page. We start by importing the necessary modules:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">lxml</span> <span class="kn">import</span> <span class="n">html</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="kn">import</span> <span class="nn">os</span>
</code></pre></div></div>
<p>We then loop through these 10 pages and scrape information of each movie on each page. We declare the following variables as preparation.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scrape 10 pages, 25 movies per page
</span><span class="n">pages</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">)]</span>

<span class="c1"># declare lists to store data
</span><span class="n">names</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">years</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">genres</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">imdbRatings</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">doubanRatings</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">regions</span> <span class="o">=</span> <span class="p">[]</span>
</code></pre></div></div>
<p>Now, for each page, we first make a get request using its url. This creates an object stored in the variable <code class="language-plaintext highlighter-rouge">response</code>, which allows us to obtain information we need about the page.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># for every page
</span><span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="n">pages</span><span class="p">:</span>

    <span class="c1"># make request
</span>    <span class="n">url</span> <span class="o">=</span> <span class="s">"https://movie.douban.com/top250?start="</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">*</span><span class="mi">25</span><span class="p">)</span> <span class="o">+</span> <span class="s">"&amp;filter="</span>
    <span class="k">print</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</code></pre></div></div>
<p>Next, we pause the loop for a few seconds to avoid bombing the website with requests.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># pause loop to avoid bombarding the site with requests
</span>    <span class="n">sleep</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div></div>
<p>Then we parse the page we just obtained as html. This gives the html code of the page.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># parse page
</span>    <span class="n">pageHtml</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
</code></pre></div></div>

<p>One can also view the html code directly from the browser. E.g., in chrome, just right-click and select “Inspect” (alternatively, <code class="language-plaintext highlighter-rouge">Ctrl-Shift-I</code>), and the page html code is in “Elements”, as shown below.</p>

<p><img src="/images/douban-inspect-html.png" alt="" width="800px" /></p>

<p>By inspecting the page html code, we see that one page has 25 containers wrapped by the tags <code class="language-plaintext highlighter-rouge">&lt;li&gt;...&lt;/li&gt;</code>, each corresponding to a movie.</p>

<p><img src="/images/douban-inspect-containers.png" alt="" width="800px" /></p>

<p>Expanding the code within a container, we can locate the individual code blocks that correspond to the information we want to collect.</p>

<p><img src="/images/douban-inspect-container.png" alt="" width="800px" /></p>

<p>Thus, we can scrape the information as follows. The url of the movie page is contained in the header of the container, wrapped by <code class="language-plaintext highlighter-rouge">&lt;div class="hd"&gt;...&lt;/div&gt;</code>. We can use this observation to locate the url and enter the Douban page of the movie.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># for every one of these 25 containers in a page
</span>    <span class="k">for</span> <span class="n">container</span> <span class="ow">in</span> <span class="n">movieContainers</span><span class="p">:</span>

        <span class="n">movieInfo</span> <span class="o">=</span> <span class="n">container</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">'div'</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="s">"hd"</span><span class="p">)</span>

        <span class="c1"># enter douban movie page
</span>        <span class="n">movieUrl</span> <span class="o">=</span> <span class="n">movieInfo</span><span class="p">.</span><span class="n">a</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'href'</span><span class="p">)</span>
        <span class="n">doubanMoviePage</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">movieUrl</span><span class="p">)</span>
        <span class="c1"># if the movie does not have a douban page, move on to the text one
</span>        <span class="k">if</span> <span class="s">"页面不存在"</span> <span class="ow">in</span> <span class="n">doubanMoviePage</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
        	<span class="k">continue</span>
        <span class="n">doubanMoviePageHtml</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">doubanMoviePage</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="s">"lxml"</span><span class="p">)</span>
</code></pre></div></div>
<p>We can now begin to collect the information we need. E.g., to scrape the year the movie is released, we observe that year is wrapped in <code class="language-plaintext highlighter-rouge">&lt;span class="year"&gt;...&lt;/span&gt;</code>.</p>

<p><img src="/images/douban-inspect-year.png" alt="" width="800px" /></p>

<p>Thus, we can extract year using regular expression as follows.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="c1"># scrape year
</span>        <span class="n">year</span> <span class="o">=</span> <span class="p">(</span><span class="n">doubanMoviePageHtml</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"span"</span><span class="p">,</span> <span class="n">class_</span> <span class="o">=</span> <span class="s">"year"</span><span class="p">)).</span><span class="n">text</span>
        <span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">r'(\d{4})'</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="p">.</span><span class="n">DOTALL</span><span class="p">)</span>
        <span class="n">year</span> <span class="o">=</span> <span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="n">year</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">years</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">year</span><span class="p">)</span>
</code></pre></div></div>
<p>Similarly, we observe that the Douban rating is wrapped in</p>

<p><img src="/images/douban-inspect-rating.png" alt="" width="800px" /></p>

<p>And so it can be extracted like this.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="c1"># scrape douban rating
</span>        <span class="n">doubanRating</span> <span class="o">=</span> <span class="nb">float</span><span class="p">((</span><span class="n">doubanMoviePageHtml</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"strong"</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="s">"ll rating_num"</span><span class="p">)).</span><span class="n">text</span><span class="p">)</span>
        <span class="n">doubanRatings</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">doubanRating</span><span class="p">)</span>
</code></pre></div></div>
<p>We still need the movie’s genre, region, and imdb rating. Since genre and region are listed in Chinese on Douban, we will obtain all these remaining information from IMDb.</p>

<p>Luckily, the Douban page contains a link to the movie’s IMDb page. So we can directly access the IMDb movie profile from where we were. Again, a comparison of the html code and the Python code to extract the IMDb link:</p>

<p><img src="/images/douban-inspect-imdb.png" alt="" width="800px" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="c1"># ender imdb movie page from douban
</span>        <span class="n">basicInfo</span> <span class="o">=</span> <span class="n">doubanMoviePageHtml</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"div"</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">"id"</span><span class="p">:</span><span class="s">"info"</span><span class="p">})</span>
        <span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">r'IMDb链接: tt(\d{7})'</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="p">.</span><span class="n">DOTALL</span><span class="p">)</span>
        <span class="n">imdbId</span> <span class="o">=</span> <span class="n">pattern</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="n">basicInfo</span><span class="p">.</span><span class="n">text</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">imdbUrl</span> <span class="o">=</span> <span class="s">"http://www.imdb.com/title/tt"</span> <span class="o">+</span> <span class="n">imdbId</span> <span class="o">+</span> <span class="s">"/"</span>
        <span class="k">print</span><span class="p">(</span><span class="n">imdbUrl</span><span class="p">)</span>

        <span class="n">imdbMoviePage</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">imdbUrl</span><span class="p">)</span>
        <span class="n">imdbMoviePageHtml</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">imdbMoviePage</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="s">"lxml"</span><span class="p">)</span>
</code></pre></div></div>
<p>Scraping genre, region, and imdb rating is similar to the above. After we are done, simply combine the lists to a dataframe and write it to a <code class="language-plaintext highlighter-rouge">.csv</code> file.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movieInfo</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'movie'</span><span class="p">:</span> <span class="n">names</span><span class="p">,</span>
                            <span class="s">'year'</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="n">years</span><span class="p">)),</span>
                            <span class="s">'genre'</span><span class="p">:</span> <span class="n">genres</span><span class="p">,</span>
                            <span class="s">'imdb'</span><span class="p">:</span> <span class="n">imdbRatings</span><span class="p">,</span>
                            <span class="s">'douban'</span><span class="p">:</span> <span class="n">doubanRatings</span><span class="p">,</span>
                            <span class="s">'region'</span><span class="p">:</span> <span class="n">regions</span><span class="p">},</span>
                            <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'movie'</span><span class="p">,</span><span class="s">'year'</span><span class="p">,</span><span class="s">'genre'</span><span class="p">,</span><span class="s">'imdb'</span><span class="p">,</span><span class="s">'douban'</span><span class="p">,</span><span class="s">'region'</span><span class="p">])</span>
<span class="n">movieInfo</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">movieInfo</span><span class="p">.</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>
<span class="k">print</span><span class="p">(</span><span class="n">movieInfo</span><span class="p">.</span><span class="n">info</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">movieInfo</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
<span class="n">fileName</span> <span class="o">=</span> <span class="s">"DoubanTop250vsIMDB.csv"</span>
<span class="n">movieInfo</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="s">","</span><span class="p">,</span> <span class="n">encoding</span> <span class="o">=</span> <span class="s">"utf-8"</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>
<p>The resulting data file looks something like this:</p>

<p><img src="/images/douban-csv.png" alt="" width="800px" /></p>

<h4 id="imdb-top-250-vs-douban">IMDb top 250 vs Douban</h4>

<p>Now we turn to the <a href="https://www.imdb.com/chart/top">top 250 movies on IMDb</a>. Scraping information from this site is the same game as before. But unlike the previous case, there is no link to a movie’s Douban page on its IMDb page. Thus, we need to search each movie directly on Douban’s site.</p>

<p>Again, we start with importing the modules. These are the same modules as before, with the last two extra lines.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">lxml</span> <span class="kn">import</span> <span class="n">html</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.common.keys</span> <span class="kn">import</span> <span class="n">Keys</span>
</code></pre></div></div>
<p><a href="https://www.seleniumhq.org/">Selenium</a> is a tool that automates browsers for automated testing purposes. In web scraping, we may run into cases where the information we need are javascript content which is not in the page’s html, as discussed <a href="https://stackoverflow.com/questions/8049520/web-scraping-javascript-page-with-python">here</a>. In these cases, instead of directly scraping the page’s html, we need to render the javascript content before scraping. This is where Selenium comes into play. It can mimic user operations on a browser and “fool” the javascript content into loading. A list of webdrivers it supports can be found as follows.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; from selenium import webdriver
&gt;&gt;&gt; help(webdriver)
Help on package selenium.webdriver in selenium:

NAME
    selenium.webdriver

PACKAGE CONTENTS
    android (package)
    blackberry (package)
    chrome (package)
    common (package)
    edge (package)
    firefox (package)
    ie (package)
    opera (package)
    phantomjs (package)
    remote (package)
    safari (package)
    support (package)
    webkitgtk (package)
</code></pre></div></div>
<p>We will be using chromedriver, which can be downloaded <a href="http://chromedriver.chromium.org/">here</a>. We add some further tweaks to disable image-loading in order to save time. We also set a timeout limit of 30s. Then we go to the Douban site.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">chromedriver</span> <span class="o">=</span> <span class="s">"path-to\chromedriver.exe"</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">"webdriver.chrome.driver"</span><span class="p">]</span> <span class="o">=</span> <span class="n">chromedriver</span>
<span class="n">options</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="n">ChromeOptions</span><span class="p">()</span>
<span class="c1"># do not load images  
</span><span class="n">prefs</span> <span class="o">=</span> <span class="p">{</span>  
     <span class="s">'profile.default_content_setting_values'</span><span class="p">:</span> <span class="p">{</span>  
        <span class="s">'images'</span><span class="p">:</span> <span class="mi">2</span> 
    <span class="p">}</span>  
<span class="p">}</span>  
<span class="n">options</span><span class="p">.</span><span class="n">add_experimental_option</span><span class="p">(</span><span class="s">'prefs'</span><span class="p">,</span><span class="n">prefs</span><span class="p">)</span>  
<span class="n">browser</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="n">Chrome</span><span class="p">(</span><span class="n">chromedriver</span><span class="p">,</span> <span class="n">chrome_options</span> <span class="o">=</span> <span class="n">options</span><span class="p">)</span>
<span class="n">browser</span><span class="p">.</span><span class="n">set_page_load_timeout</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>

<span class="n">browser</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'https://movie.douban.com'</span><span class="p">)</span>
<span class="k">assert</span> <span class="s">"豆瓣电影"</span> <span class="ow">in</span> <span class="n">browser</span><span class="p">.</span><span class="n">title</span>
</code></pre></div></div>
<p>The second last line will prompt a browser window to open and visit the given url.</p>

<p>As before, we declare some empty lists to store our data. Then we start parsing the IMDb top 250 page.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># declare lists to store data
</span><span class="n">names</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">years</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">genres</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">imdbRatings</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">doubanRatings</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">regions</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># make request
</span><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://www.imdb.com/chart/top"</span><span class="p">)</span>

<span class="c1"># parse page
</span><span class="n">pageHtml</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
</code></pre></div></div>
<p>The top 250 movies are conveniently displayed in one page, so there is no need to turn page as in the case of Douban top 250. For each of these 250 movies, we first scrape its title and year of release from the main page; then we enter the movie’s profile page and extract its IMDb rating, genre, region, etc.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">250</span><span class="p">):</span>

    <span class="c1"># pause loop to avoid bombarding the site with requests
</span>    <span class="n">sleep</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>

    <span class="c1"># scrape name
</span>    <span class="n">titleInfo</span> <span class="o">=</span> <span class="n">pageHtml</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">'td'</span><span class="p">,</span> <span class="n">class_</span> <span class="o">=</span> <span class="s">'titleColumn'</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">titleInfo</span><span class="p">.</span><span class="n">a</span><span class="p">.</span><span class="n">text</span>
    <span class="n">names</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

    <span class="c1"># scrape year
</span>    <span class="n">year</span> <span class="o">=</span> <span class="n">titleInfo</span><span class="p">.</span><span class="n">span</span><span class="p">.</span><span class="n">text</span>
    <span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">r'(\d{4})'</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="p">.</span><span class="n">DOTALL</span><span class="p">)</span>
    <span class="n">year</span> <span class="o">=</span> <span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="n">year</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">years</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">year</span><span class="p">)</span>

    <span class="c1"># enter imdb movie page
</span>    <span class="n">imdbMovieUrl</span> <span class="o">=</span> <span class="s">'http://www.imdb.com'</span> <span class="o">+</span> <span class="n">titleInfo</span><span class="p">.</span><span class="n">a</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'href'</span><span class="p">)</span>
    <span class="n">imdbMoviePage</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">imdbMovieUrl</span><span class="p">)</span>
    <span class="n">imdbMoviePageHtml</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">imdbMoviePage</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">imdbMovieUrl</span><span class="p">)</span>

    <span class="c1"># scrape imdb rating
</span>    <span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">r'&lt;span itemprop="ratingValue"&gt;(.+?)&lt;/span&gt;'</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="p">.</span><span class="n">DOTALL</span><span class="p">)</span>
    <span class="n">imdbRating</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="n">imdbMoviePage</span><span class="p">.</span><span class="n">text</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">imdbRatings</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">imdbRating</span><span class="p">)</span>

    <span class="c1"># ...
</span></code></pre></div></div>
<p>Scraping the movies’ Douban ratings is intuitive. Just like using a browser, we locate the search box on the website, type in the keyword, press enter, and then obtain the resulting webpage from the browser. Since the keyword search is not perfectly accurate, the search may return several results, and considering that Douban mainly uses Chinese, the movie we want may not be the first result. Thus, we go through each of the search results and only scrape its rating if the result has matching title and year as the search keyword.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># scrape douban rating
</span>    <span class="n">keywords</span> <span class="o">=</span> <span class="n">name</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">year</span>
    <span class="c1"># find the searchbox element
</span>    <span class="n">elem</span> <span class="o">=</span> <span class="n">browser</span><span class="p">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">"search_text"</span><span class="p">)</span>
    <span class="c1"># clear search box
</span>    <span class="n">elem</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
    <span class="c1"># enter in search box
</span>    <span class="n">elem</span><span class="p">.</span><span class="n">send_keys</span><span class="p">(</span><span class="n">keywords</span><span class="p">)</span>
    <span class="n">elem</span><span class="p">.</span><span class="n">send_keys</span><span class="p">(</span><span class="n">Keys</span><span class="p">.</span><span class="n">RETURN</span><span class="p">)</span>
    <span class="n">searchPageHtml</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">browser</span><span class="p">.</span><span class="n">page_source</span><span class="p">,</span> <span class="s">"lxml"</span><span class="p">)</span>
    <span class="n">containers</span> <span class="o">=</span> <span class="n">searchPageHtml</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">'div'</span><span class="p">,</span> <span class="n">class_</span> <span class="o">=</span> <span class="s">'item-root'</span><span class="p">)</span>
    <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">containers</span><span class="p">):</span>
        <span class="n">firstContainer</span> <span class="o">=</span> <span class="n">containers</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
        <span class="n">titleInfo</span> <span class="o">=</span> <span class="n">firstContainer</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">'div'</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="s">"title"</span><span class="p">).</span><span class="n">text</span>
        <span class="c1"># only scrape rating if result has matching title and year
</span>        <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">titleInfo</span> <span class="ow">and</span> <span class="n">year</span> <span class="ow">in</span> <span class="n">titleInfo</span><span class="p">:</span>
            <span class="n">doubanRating</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">firstContainer</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"span"</span><span class="p">,</span> <span class="n">class_</span> <span class="o">=</span> <span class="s">"rating_nums"</span><span class="p">).</span><span class="n">text</span><span class="p">)</span>
            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">containers</span><span class="p">):</span>
        <span class="n">doubanRating</span> <span class="o">=</span> <span class="s">"NA"</span>
    <span class="n">doubanRatings</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">doubanRating</span><span class="p">)</span>
</code></pre></div></div>
<p>After the loop is finished, as before, we combine the lists to a dataframe and write the results to a <code class="language-plaintext highlighter-rouge">.csv</code> file.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movieInfo</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'movie'</span><span class="p">:</span> <span class="n">names</span><span class="p">,</span>
                              <span class="s">'year'</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="n">years</span><span class="p">)),</span>
                              <span class="s">'genre'</span><span class="p">:</span> <span class="n">genres</span><span class="p">,</span>
                              <span class="s">'imdb'</span><span class="p">:</span> <span class="n">imdbRatings</span><span class="p">,</span>
                              <span class="s">'douban'</span><span class="p">:</span> <span class="n">doubanRatings</span><span class="p">,</span>
                              <span class="s">'region'</span><span class="p">:</span> <span class="n">regions</span><span class="p">},</span>
                              <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'movie'</span><span class="p">,</span><span class="s">'year'</span><span class="p">,</span><span class="s">'genre'</span><span class="p">,</span><span class="s">'imdb'</span><span class="p">,</span><span class="s">'douban'</span><span class="p">,</span><span class="s">'region'</span><span class="p">])</span>
<span class="n">movieInfo</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">movieInfo</span><span class="p">.</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="n">movieInfo</span><span class="p">.</span><span class="n">info</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">movieInfo</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
<span class="n">fileName</span> <span class="o">=</span> <span class="s">"IMDBTop250vsDouban.csv"</span>
<span class="n">movieInfo</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="s">","</span><span class="p">,</span> <span class="n">encoding</span> <span class="o">=</span> <span class="s">"utf-8"</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>
<p>The resulting data file looks something like this:</p>

<p><img src="/images/imdb-csv.png" alt="" width="800px" /></p>

<h3 id="visualization">Visualization</h3>

<p>The histograms show that the ratings of both IMDb and Douban’s own top 250 movies are between 8 and 10, with Douban having a slightly higher average. Again for both IMDb and Douban, the ratings of their own top 250 movies have a smaller spread than those on the other site, meaning that both websites have some top movies that are rated either quite a bit higher or lower on the other website. That said, Douban in general seems to be more “tolerant” with the top movies on IMDb than the other way around.</p>

<p><img src="/images/DoubanTop250vsIMDB.png" alt="" width="800px" /></p>

<p><img src="/images/IMDBTop250vsDouban.png" alt="" width="800px" /></p>

<p>The distributions of genres among the top 250 movies on the two websites seem similar, with the most popular genre being drama, followed by adventure, comedy, crime, etc. Regarding regions, the United States remains the country that produces the most top movies on both websites. Yet there are evidently more movies of Eastern origin among Douban’s top 250 than IMDb’s, e.g., Japan, China, Hong Kong, Taiwan, India, Thailand. Similarly, there are more movies of Western origin among IMDb’s top 250, e.g., the United States alone occupies over half, followed by countries in Europe.</p>

<p><img src="/images/DoubanTop250vsIMDB_pie.png" alt="" width="800px" /></p>

<p><img src="/images/IMDBTop250vsDouban_pie.png" alt="" width="800px" /></p>
:ET