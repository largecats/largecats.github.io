I"Ä)<ul id="markdown-toc">
  <li><a href="#motivation" id="markdown-toc-motivation">Motivation</a></li>
  <li><a href="#preparation" id="markdown-toc-preparation">Preparation</a></li>
  <li><a href="#method" id="markdown-toc-method">Method</a>    <ul>
      <li><a href="#installation" id="markdown-toc-installation">Installation</a></li>
      <li><a href="#create-project-folders" id="markdown-toc-create-project-folders">Create project folders</a></li>
      <li><a href="#configure-vs-code" id="markdown-toc-configure-vs-code">Configure VS Code</a></li>
      <li><a href="#add-source-code-file" id="markdown-toc-add-source-code-file">Add source code file</a></li>
      <li><a href="#build-the-program" id="markdown-toc-build-the-program">Build the program</a></li>
      <li><a href="#run-the-program-executable" id="markdown-toc-run-the-program-executable">Run the program executable</a></li>
    </ul>
  </li>
</ul>

<h2 id="motivation">Motivation</h2>

<p>I want to use VS Code to edit C/C++ code on Windows but compile and run executable on WSL through the VS Code UI. Note that this is not necessary. You can simply navigate to <code class="language-plaintext highlighter-rouge">/mnt/c/Users/&lt;path_to_file&gt;</code>, the path of the source <code class="language-plaintext highlighter-rouge">.c</code> file on Windows under the WSL file system, do <code class="language-plaintext highlighter-rouge">cc xxx.c</code> and the <code class="language-plaintext highlighter-rouge">a.out</code> file would be produced.</p>

<h2 id="preparation">Preparation</h2>

<p>I read <a href="https://code.visualstudio.com/docs/cpp/config-wsl">this article</a>.</p>

<h2 id="method">Method</h2>

<h3 id="installation">Installation</h3>

<ol>
  <li>Get windows subsystem for Linux following <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">this guide</a>.</li>
  <li>Install <a href="https://code.visualstudio.com/download">Visual Studio Code</a> and the <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools"><code class="language-plaintext highlighter-rouge">C/C++</code> extension</a>.</li>
  <li>In WSL, type
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get update
sudo apt install gcc
sudo apt-get install build-essential gdb
</code></pre></div>    </div>
    <p>to install <code class="language-plaintext highlighter-rouge">gcc</code> (compiler for C), <code class="language-plaintext highlighter-rouge">g++</code> (compiler for C++), and <code class="language-plaintext highlighter-rouge">gdb</code> (debugger). Type</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>whereis gcc
whereis g++
whereis gdb
</code></pre></div>    </div>
    <p>to verify that they are installed.</p>
  </li>
</ol>

<h3 id="create-project-folders">Create project folders</h3>
<ol>
  <li>In WSL, make a directory <code class="language-plaintext highlighter-rouge">projects</code> and subdirectory <code class="language-plaintext highlighter-rouge">helloworld</code> for the sample project <code class="language-plaintext highlighter-rouge">helloworld</code> using
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir projects
cd projects
mkdir helloworld
</code></pre></div>    </div>
    <p>This is where the executable will be placed.</p>
  </li>
  <li>In Windows, create a folder <code class="language-plaintext highlighter-rouge">helloworld</code>.</li>
</ol>

<h3 id="configure-vs-code">Configure VS Code</h3>
<ol>
  <li>In VS Code, press <code class="language-plaintext highlighter-rouge">Ctrl+Shift+P</code>, type <code class="language-plaintext highlighter-rouge">C/C++</code> and select <code class="language-plaintext highlighter-rouge">Edit Configurations (UI)</code>. Set <code class="language-plaintext highlighter-rouge">Compiler path</code> to <code class="language-plaintext highlighter-rouge">/usr/bin/gcc</code> and <code class="language-plaintext highlighter-rouge">IntelliSense mode</code> to <code class="language-plaintext highlighter-rouge">gcc-x64</code>.</li>
  <li>Open <code class="language-plaintext highlighter-rouge">helloworld/.vscode/c_cpp_properties.json</code>, the file should look like this
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
 "configurations": [
     {
         "name": "Win32",
         "includePath": [
             "${workspaceFolder}/**"
         ],
         "defines": [
             "_DEBUG",
             "UNICODE",
             "_UNICODE"
         ],
         "compilerPath": "/usr/bin/gcc",
         "cStandard": "c11",
         "cppStandard": "c++17",
         "intelliSenseMode": "gcc-x64"
     }
 ],
 "version": 4
}
</code></pre></div>    </div>
  </li>
  <li>In VS Code, go to <code class="language-plaintext highlighter-rouge">View &gt; Command Palette &gt; Configure Default Build Task &gt; Create tasks.json file from template &gt; Others</code>. In the <code class="language-plaintext highlighter-rouge">tasks.json</code> file that just popped up, paste the following content, replacing <code class="language-plaintext highlighter-rouge">&lt;linux user name&gt;</code> with your Linux username.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
 "version": "2.0.0",
 "windows": {
   "options": {
     "shell": {
       "executable": "bash.exe",
       "args": ["-c"]
     }
   }
 },
 "tasks": [
   {
     "label": "build on WSL",
     "type": "shell",
     "command": "g++",
     "args": [
       "-g",
       "-o",
       "/home/&lt;linux user name&gt;/projects/helloworld/helloworld.out",
       "'${relativeFileDirname}/${fileBasename}'"
     ],
     "group": {
       "kind": "build",
       "isDefault": true
     },
     "problemMatcher": [
         "$gcc"
     ]
   },
   {
     "label": "run on WSL",
     "type": "shell",
     "command": "/home/&lt;linux user name&gt;/projects/helloworld/helloworld.out",
     "group": {
         "kind": "build",
         "isDefault": true
     },
     "problemMatcher": [
         "$gcc"
     ]
     }
 ]
  }
</code></pre></div>    </div>
    <p>The task <code class="language-plaintext highlighter-rouge">build on WSL</code> builds the program and creates an executable <code class="language-plaintext highlighter-rouge">helloworld.out</code>. The task <code class="language-plaintext highlighter-rouge">run on WSL</code> runs the executable and prints the output in VS Code.</p>
  </li>
  <li>For debugging: In <code class="language-plaintext highlighter-rouge">json</code>, create a <code class="language-plaintext highlighter-rouge">launch.json</code> file and paste the following content, replacing <code class="language-plaintext highlighter-rouge">&lt;linux username&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;windows username&gt;</code> with your Linux and Windows usernames, respectively.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "version": "0.2.0",
  "configurations": [
    
 {
   "name": "(gdb) Launch",
   "preLaunchTask": "build on WSL",
   "type": "cppdbg",
   "request": "launch",
   "program": "/home/&lt;linux username&gt;/projects/helloworld/helloworld.out",
   "args": [""],
   "stopAtEntry": true,
   "cwd": "/home/&lt;linux username&gt;/projects/helloworld/",
   "environment": [],
   "externalConsole": true,
   "windows": {
     "MIMode": "gdb",
     "miDebuggerPath": "/usr/bin/gdb",
     "setupCommands": [
       {
         "description": "Enable pretty-printing for gdb",
         "text": "-enable-pretty-printing",
         "ignoreFailures": true
       }
     ]
   },
   "pipeTransport": {
     "pipeCwd": "",
     "pipeProgram": "c:\\windows\\sysnative\\bash.exe",
     "pipeArgs": ["-c"],
     "debuggerPath": "/usr/bin/gdb"
   },
   "sourceFileMap": {
     "/mnt/c": "${env:systemdrive}/",
     "/usr": "C:\\Users\\&lt;windows username&gt;\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\usr\\"
   }
 }
  ]
}
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="add-source-code-file">Add source code file</h3>
<ol>
  <li>In VS Code, in the folder <code class="language-plaintext highlighter-rouge">helloworld</code>, create a <code class="language-plaintext highlighter-rouge">helloworld.cpp</code> or <code class="language-plaintext highlighter-rouge">helloworld.c</code> file and paste the following content:
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;stdio.h&gt;
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
 <span class="n">printf</span><span class="p">(</span><span class="s">"Hello world"</span><span class="p">);</span>
 <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Save the file.</li>
</ol>

<h3 id="build-the-program">Build the program</h3>
<p><code class="language-plaintext highlighter-rouge">Ctrl-Shift-B &gt; build on WSL</code> to build the program <code class="language-plaintext highlighter-rouge">helloworld.cpp</code> or <code class="language-plaintext highlighter-rouge">helloworld.c</code> on Windows using <code class="language-plaintext highlighter-rouge">gcc</code> installed in WSL and create an executable <code class="language-plaintext highlighter-rouge">/home/&lt;linux username&gt;/projects/helloworld/helloworld.out</code>. You should see a message</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; Executing task: g++ -g -o /home/&lt;linux username&gt;/projects/helloworld/helloworld.out 'helloworld.c' &lt;


Terminal will be reused by tasks, press any key to close it.
</code></pre></div></div>

<h3 id="run-the-program-executable">Run the program executable</h3>
<p><code class="language-plaintext highlighter-rouge">Ctrl-Shift-B &gt; run on WSL</code> to run the executable <code class="language-plaintext highlighter-rouge">/home/&lt;linux username&gt;/projects/helloworld/helloworld.out</code>. You should see the output</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; Executing task: /home/&lt;linux username&gt;/projects/helloworld/helloworld.out &lt;

Hello world
Terminal will be reused by tasks, press any key to close it.
</code></pre></div></div>
:ET