I"ý<head>
    <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
            tex2jax: {
            skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],
            inlineMath: [['$','$']]
            }
        });
    </script>
</head>

<p>A cached RDD can only be unpersisted through a variable referencing it.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> l <span class="o">=</span> <span class="o">[(</span><span class="s1">'Alice'</span>, 1<span class="o">)]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">df</span> <span class="o">=</span> spark.createDataFrame<span class="o">(</span>l<span class="o">)</span> <span class="c"># create sample dataframe</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">df
</span>DataFrame[_1: string, _2: bigint]
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="o">(</span><span class="nb">id</span>, rdd<span class="o">)</span> <span class="k">in </span>spark.sparkContext._jsc.getPersistentRDDs<span class="o">()</span>.items<span class="o">()</span>:
...  print <span class="nb">id</span>
...
<span class="o">&gt;&gt;&gt;</span> df.cache<span class="o">()</span> <span class="c"># cache dataframe</span>
DataFrame[_1: string, _2: bigint]
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="o">(</span><span class="nb">id</span>, rdd<span class="o">)</span> <span class="k">in </span>spark.sparkContext._jsc.getPersistentRDDs<span class="o">()</span>.items<span class="o">()</span>:
...  print <span class="nb">id</span>
...
481 <span class="c"># id of the cached dataframe</span>

<span class="o">&gt;&gt;&gt;</span> df_dict <span class="o">=</span> <span class="o">{</span><span class="s1">'df'</span>: <span class="nb">df</span><span class="o">}</span>
<span class="o">&gt;&gt;&gt;</span> ref <span class="o">=</span> df_dict[<span class="s1">'df'</span><span class="o">]</span> <span class="c"># create reference</span>
<span class="o">&gt;&gt;&gt;</span> ref.unpersist<span class="o">()</span> <span class="c"># unpersist dataframe through reference variable</span>
DataFrame[_1: string, _2: bigint]
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="o">(</span><span class="nb">id</span>, rdd<span class="o">)</span> <span class="k">in </span>spark.sparkContext._jsc.getPersistentRDDs<span class="o">()</span>.items<span class="o">()</span>:
...  print <span class="nb">id</span>
... 
<span class="c"># no id, successfully unpersisted</span>
</code></pre></div></div>
<p>Variable created via <code class="language-plaintext highlighter-rouge">registerTempTable()</code> does not reference the original dataframe:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> df.cache<span class="o">()</span> <span class="c"># cache dataframe again</span>
DataFrame[_1: string, _2: bigint]
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="o">(</span><span class="nb">id</span>, rdd<span class="o">)</span> <span class="k">in </span>spark.sparkContext._jsc.getPersistentRDDs<span class="o">()</span>.items<span class="o">()</span>:
...  print <span class="nb">id</span>
...
483
<span class="o">&gt;&gt;&gt;</span> df.registerTempTable<span class="o">(</span><span class="s1">'df'</span><span class="o">)</span>
<span class="o">&gt;&gt;&gt;</span> ref <span class="o">=</span> spark.sql<span class="o">(</span><span class="s1">'select * from df'</span><span class="o">)</span> <span class="c"># create variable that does not reference df</span>
<span class="o">&gt;&gt;&gt;</span> ref.unpersist<span class="o">()</span>
DataFrame[_1: string, _2: bigint]
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="o">(</span><span class="nb">id</span>, rdd<span class="o">)</span> <span class="k">in </span>spark.sparkContext._jsc.getPersistentRDDs<span class="o">()</span>.items<span class="o">()</span>:
...  print <span class="nb">id</span>
...
483 <span class="c"># df is not unpersisted, id is still there</span>
</code></pre></div></div>
:ET